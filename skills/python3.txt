set(리스트 자료형) - 중복 제거

max(리스트 자료형) - 리스트 중 최대값(숫자, 문자 가능)
max(a,b) 가능
min(리스트 자료형) - 리스트 중 최소값
min(a,b) 가능
sum(리스트 자료형) - 합
sum(리스트 자료형,시작인덱스지정) - 지정합

(한개 원소) in 리스트 - 리스트 안에 한개원소를 찾고 싶을 때
not in 도 가능

list - c++ 배열과 비슷, 동적할당 필요x
list.append(요소) - 요소 추가
list.del(list[i]) - i 번째 요소 제거

list.sort() - 정렬
list.append(값) - 값을 리스트 맨 뒤에 추가
list.index(값) - 값이 있으면 인덱스 위치 알려줌
list.remove(값) - 값 제거
list.insert(a, b) - a번째 인덱스에 b요소 추가
list.pop() - 리스트 맨 뒤의 값 반환하면서 제거
list.extend(x) - x는 리스트만 가능 리스트 이어 붙이기
list.count(a) - a의 갯수 반환

list = [0 for in range(10)] - 10개 원소를 가진 리스트를 0으로 초기화
# 파이썬에서 H x W 2차원 리스트를 0으로 초기화
arr = [[0 for i in range(w)] for j in range(h)]
arr = [[0]*w for j in range(h)]

print(f'하하하 {answer}') - string 과 정수형 변수를 같이 쓸 때, {정수형 변수}

# 영어로 된 문자열 숫자 문자열로 치환
numbers = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
string = "0123456789"
for i in range(len(numbers)) :
    string = string.replace(f'{i}', numbers[i]) # 문자열 치환 replace(바꾸고 싶은 문자열, 바꾸는 문자열)

# new_id 는 문자열, tmp_id 는 리스트
tmp_id = list(new_id) # 문자열을 리스트로 변경
new_id = "".join(tmp_id) #리스트를 문자열로 변경 연결은 "" 현재 공백기준으로 연결

list.lower() - 대문자를 소문자로 바꾸는 함수
list.upper() - 소문자를 대문자로 바꾸는 함수
list.islower() - 리스트가 전부 대문자인지 확인
list.isupper() - 리스트가 전부 소문자인지 확인

# 딕셔너리 자료형이 리스트 자료형보다 in 으로 search 하는 경우 딕셔너리 자료형이 O(n)으로 속도면에서 가장 효율적이다.
dic = {} - 딕셔너리 자료형 선언
dic.values() - 딕셔너리 모든 value 값 불러오기
dic.keys() - 딕셔너리 모든 key 값 불러오기
dic.items() - 딕셔너리 모든 key, value 값 불러오기

#key 값 하나씩 불러오기
for key in dic:
     print(key)
     
#value 값 하나씩 불러오기
for val in dic.values():
     print(val)
     
#key, value 값 쌍으로 하나씩 불러오기
for key, val in dic.items():
     print("key = {key}, value={value}".format(key=key,value=val))

# 리스트 요소 안에 튜플로 insert
# list.insert(len(list), (튜플요소)) - len(list) 맨 뒤에, 0 맨 앞에
for i in range(numberOfBoxers) :
    boxers.insert(len(boxers),(wins[i], wWins[i], weights[i], i+1))

# 다중정렬 - 튜플 x[i]의 조건 , -x[i] 내림차순, reverse 역순
boxersSet = sorted(boxers, key = lambda x:(x[0],x[1],x[2],-x[3]), reverse = True)
boxers.sort(key = lambda x:(x[0],x[1],x[2],-x[3]), reverse = True)

# 리스트 안 튜플 지정 값 가져오기
a = [(1, 'juca'), (22, 'james'), (53, 'xuxa'), (44, 'delicia'), (1, 'shiwoo')] 
answer = [x[0] for x in a] 
# 각 튜플의 첫번째 element만 list 형태로 추출 -> [1, 22, 53, 44, 1]

# 리스트 int형으로 변환
저장할리스트 = list(map(int, 리스트명))

# 문자열에서 숫자만 리스트로 저장
import re
저장할리스트명 = re.findall(r'\d+', 문자열)

# 음수 반올림, 음수는 몫이 자동으로 내림이 됨. 음수의 반 내림은 양수에서 올림과 같음
-((p - 100) // s)

# 유클리드 호제법
# 최대공약수 구하기
def GCD(x,y) :
    while y : #y가 참인 동안 = 자연수일때 = a%b != 0
        x,y = y, x%y
    return x
  
# 최소공배수 구하기
def LCM(a,b) :
    return (a*b)//GCD(a,b)

# binary section 이분정렬 사용방법
from bisect import bisect_left, bisect_right

# (value 찾고 싶은 숫자, iterable 찾고자 하는 리스트)
bisect_left(literable, value) : 숫자의 왼쪽 인덱스를 구하기
bisect_right(literable, value) : 숫자의 오른쪽 인덱스를 구하기
